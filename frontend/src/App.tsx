/**
 * Main App component
 * Two-column layout: Chat interface on the left, Form preview on the right
 */
import { useState, useEffect, useRef } from 'react';
import type { ChatMessage, FormData, JSONSchema } from './types';
import { ChatMessage as ChatMessageComponent } from './components/ChatMessage';
import { ChatInput } from './components/ChatInput';
import { DynamicFormRenderer } from './components/DynamicFormRenderer';
import { ProgressBar } from './components/ProgressBar';
import { sendChatMessage, getFormSchema, generateSessionId } from './services/api';
import { calculateFormProgress } from './utils/formUtils';
import './App.css';

function App() {
  // State management
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [formData, setFormData] = useState<FormData>({});
  const [formSchema, setFormSchema] = useState<JSONSchema | null>(null);
  const [highlightedFields, setHighlightedFields] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId] = useState(() => generateSessionId());
  const [error, setError] = useState<string | null>(null);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Load form schema on mount
  useEffect(() => {
    loadFormSchema();
  }, []);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const loadFormSchema = async () => {
    try {
      const response = await getFormSchema('equipment_form');
      setFormSchema(response.schema);
      
      // Add welcome message
      const welcomeMessage: ChatMessage = {
        id: 'welcome',
        role: 'assistant',
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö üòä\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö? (‡πÄ‡∏ä‡πà‡∏ô "‡∏Ç‡∏≠ laptop 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡πâ‡∏≤")',
        timestamp: new Date(),
      };
      setMessages([welcomeMessage]);
    } catch (err) {
      console.error('Failed to load form schema:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  };

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || isLoading) return;

    // Add user message
    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      content,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);
    setError(null);

    try {
      // Send to backend
      const response = await sendChatMessage({
        message: content,
        session_id: sessionId,
        form_data: formData,
      });

      // Update form data
      setFormData(response.form_data);
      setHighlightedFields(response.highlighted_fields);

      // Add assistant message
      const assistantMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        role: 'assistant',
        content: response.response,
        timestamp: new Date(),
        highlighted_fields: response.highlighted_fields,
        confidence: response.confidence,
      };
      setMessages((prev) => [...prev, assistantMessage]);

      // Clear highlights after 3 seconds
      setTimeout(() => {
        setHighlightedFields([]);
      }, 3000);
    } catch (err: any) {
      console.error('Failed to send message:', err);
      const errorMessage: ChatMessage = {
        id: `error-${Date.now()}`,
        role: 'assistant',
        content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ'}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà http://localhost:8000`,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Calculate progress
  const progress = formSchema 
    ? calculateFormProgress(formData, formSchema)
    : { percentage: 0, filledFields: 0, totalFields: 0, requiredFields: 0, filledRequiredFields: 0 };

  return (
    <div className="app">
      {/* Header */}
      <header className="app-header">
        <div className="header-content">
          <h1 className="app-title">
            ü§ñ SiriForm Agent
          </h1>
          <p className="app-subtitle">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
          </p>
        </div>
        {error && (
          <div className="error-banner">
            ‚ö†Ô∏è {error}
          </div>
        )}
      </header>

      {/* Main Content - Two Columns */}
      <div className="app-content">
        {/* Left Column - Chat */}
        <div className="chat-column">
          <div className="chat-messages">
            {messages.map((message) => (
              <ChatMessageComponent key={message.id} message={message} />
            ))}
            {isLoading && (
              <div className="loading-indicator">
                <div className="loading-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <span className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</span>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          <ChatInput 
            onSend={handleSendMessage} 
            disabled={isLoading}
          />
        </div>

        {/* Right Column - Form Preview */}
        <div className="form-column">
          <div className="form-header">
            <h2 className="form-title">üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°</h2>
            <ProgressBar 
              percentage={progress.percentage}
              label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"
            />
            <div className="progress-stats">
              <span className="stat-item">
                üìù ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {progress.filledRequiredFields}/{progress.requiredFields} ‡∏ü‡∏¥‡∏•‡∏î‡πå
              </span>
            </div>
          </div>
          <div className="form-content">
            {formSchema ? (
              <DynamicFormRenderer
                schema={formSchema}
                formData={formData}
                highlightedFields={highlightedFields}
                readOnly={true}
              />
            ) : (
              <div className="loading-form">
                <div className="loading-spinner"></div>
                <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°...</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
